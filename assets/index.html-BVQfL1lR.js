import{_ as n,c as e,e as a,o as l}from"./app-0O2wLXp2.js";const t={};function o(p,s){return l(),e("div",null,s[0]||(s[0]=[a(`<div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 装饰器函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> decorator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;执行被装饰的函数之前&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    func</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;执行被装饰的函数之后&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需要被装饰的函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> original</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;这个函数被执行了&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用装饰器装饰函数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> decorated</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> decorator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">original</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行装饰后的函数</span></span>
<span class="line"><span style="color:#61AFEF;">decorated</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 会在控制台输出：&quot;执行被装饰的函数之前&quot;、&quot;这个函数被执行了&quot;、&quot;执行被装饰的函数之后&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)]))}const c=n(t,[["render",o],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/article/5lfheece/","title":"原生js实现一个装饰器","lang":"zh-CN","frontmatter":{"title":"原生js实现一个装饰器","createTime":"2024/12/29 00:00:36","permalink":"/article/5lfheece/","tags":["js"],"head":[["meta",{"property":"og:url","content":"https://weige66.github.io/article/5lfheece/"}],["meta",{"property":"og:site_name","content":"zhengWei's Blog"}],["meta",{"property":"og:title","content":"原生js实现一个装饰器"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-28T16:17:08.000Z"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:modified_time","content":"2024-12-28T16:17:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原生js实现一个装饰器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-28T16:17:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"weiGe66\\",\\"url\\":\\"https://github.com/weiGe66\\",\\"email\\":\\"2361929296@qq.com\\"}]}"]]},"headers":[],"readingTime":{"minutes":0.46,"words":137},"git":{"updatedTime":1735402628000,"contributors":[{"name":"zhengwei","username":"zhengwei","email":"wangzhengwei@nstc.com.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/zhengwei?v=4","url":"https://github.com/zhengwei"}]},"filePathRelative":"blog/js相关/原生js实现一个装饰器.md","categoryList":[{"id":"126ac9","sort":10005,"name":"blog"},{"id":"7f4df5","sort":10008,"name":"js相关"}],"bulletin":false}`);export{c as comp,r as data};
